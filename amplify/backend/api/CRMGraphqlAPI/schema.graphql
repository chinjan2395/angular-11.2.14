# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createUsers(input: CreateUsersInput!): Users
  deleteUsers(input: DeleteUsersInput!): Users
  updateUsers(input: UpdateUsersInput!): Users
}

type Query {
  getTodos: [Todo]
  getUsers(id: ID!, name: String!): Users
  listUsers(filter: TableUsersFilterInput, limit: Int, nextToken: String): UsersConnection
}

type Subscription {
  onCreateUsers(email: String, id: ID, name: String, password: String, username: String): Users @aws_subscribe(mutations : ["createUsers"])
  onDeleteUsers(email: String, id: ID, name: String, password: String, username: String): Users @aws_subscribe(mutations : ["deleteUsers"])
  onUpdateUsers(email: String, id: ID, name: String, password: String, username: String): Users @aws_subscribe(mutations : ["updateUsers"])
}

type Todo {
  description: String
  id: ID!
  name: String
  priority: Int
}

type Users {
  create_at: AWSTimestamp
  email: String!
  id: ID!
  name: String!
  password: String!
  username: String!
}

type UsersConnection {
  items: [Users]
  nextToken: String
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateUsersInput {
  create_at: AWSTimestamp
  email: String!
  id: ID!
  name: String!
  password: String!
  username: String!
}

input DeleteUsersInput {
  id: ID!
  name: String!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableUsersFilterInput {
  create_at: TableIntFilterInput
  email: TableStringFilterInput
  id: TableIDFilterInput
  name: TableStringFilterInput
  password: TableStringFilterInput
  username: TableStringFilterInput
}

input UpdateUsersInput {
  create_at: AWSTimestamp
  email: String
  id: ID!
  name: String!
  password: String
  username: String
}
